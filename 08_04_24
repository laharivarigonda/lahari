->> Task 1:-
purpose of making constr as private: 
Making a constructor private is a technique used in object-oriented programming to control how instances of a class are created.

->> Task 2:-
can i make constr as final - impact:
Constructors cannot be declared as `final` in Java; however, making the entire class `final` prevents subclassing, indirectly securing constructors from being modified.

->> Task 3:-
if a keep int nearby constr - what happens:
The 'int' variable can be used within the constructor or the class for various purposes, such as calculations or storing values.
So, keeping 'int' nearby constructor it doesn't impact.

->> Task 4:-
class emp, in main meth - if a craete 5 obj - it should print 5 as o/p
if u creat 3 obj - it  should print 3 obj.

public class Emp {
    private static int objectCount = 0;

    public Emp() {
        objectCount++;
    }

    public static void main(String[] args) {
     
        for (int i = 0; i < 5; i++) {
            new Emp();
        }

        System.out.println(objectCount);
    }
}

output:- 
no of Emp object created: 5


======================================================================================================================
-> 1. Write a Java program to create and display a unique three-digit number using 1, 2, 3, 4. Also count how many three-digit numbers are there.
123 143 132 134 241 234 132 342 .... ....
Sol:-
public class UniqueThreedigitNumber
{
public static void main (Strings args[]){
   int count=0;
     for(i=0; i<=4;i++)
     {
      for(j=0; j<=4;j++)
     {
      for(k=0; k<=4;k++)
     {
     if(i !=j && i!=k && j!=k ){
        int number = i* 100 + j*100 + k;
        system.out.print(number + "");
        count++;
       }
     }
   }
}
  system.out.println("\nThe number of three digit number" +count);
 }
}
Output:-
123 124 132 134 142 143 213 214 231 234 241 243 312 314 321 324 341 342 412 413 421 423 431 432 
Total number of three-digit numbers: 24


-> 2. Write a Java program to print odd numbers from 1 to 99. Prints one number per line.
Sol:-
public class PrintOddNumbers
{
public static void main (Strings args[]){
for(i=1; i<=99; i++){
 if(i % 2 != 0){
system.out.println(i);
}
}
}
OutPut:-
1
3
5
7
9
10
.
.
.
90
91
93
95
97
99


-> 3. Write a Java program that accepts an integer (n) and computes the value of n+nn+nnn.
Sample Output: Input number: 5 
5 + 55 + 555
Sol:-
import java.util.Scanner;

public class NumberCalculation {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Input number: ");
        int n = scanner.nextInt();

        int nn = n * 10 + n;  // Calculate nn
        int nnn = nn * 10 + n;  // Calculate nnn

        int result = n + nn + nnn;
        System.out.println(n + " + " + nn + " + " + nnn + " = " + result);
    }
}
output:-
Input number: 5
5+55+555 = 615


-> 4. Consider the following class:
public class IdentifyMyParts { public static int x = 7; public int y = 3; } *****
What are the class variables?
Soln: X is a class variables.
x is a class variable because it is declared with the static keyword.

What are the instance variables?
Soln: Y is a instance variable.
 y is an instance variable because it is not declared with the static keyword.

What is the output from the following code:

public class IdentifyMyParts 
{ 
public static int x = 7; 
public int y = 3; 
public static void main(String args[])
{
IdentifyMyParts a = new IdentifyMyParts(); 
IdentifyMyParts b = new IdentifyMyParts(); 
a.y = 5; 
b.y = 6; 
a.x = 1; 
b.x = 2; //x is a static variable, it's the same for all instances  
System.out.println("a.y = " + a.y); 
System.out.println("b.y = " + b.y); 
System.out.println("a.x = " + a.x); 
System.out.println("b.x = " + b.x); 
System.out.println("IdentifyMyParts.x = " + IdentifyMyParts.x); //when you print the value of x, it reflects the last assigned value
}
}

Output:-
a.y = 5
b.y = 6
a.x = 2
b.x = 2
IdentifyMyParts.x = 2
